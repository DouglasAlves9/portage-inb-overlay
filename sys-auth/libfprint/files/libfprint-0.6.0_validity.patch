diff -Nru V_0_6_0/configure.ac V_0_6_0-patched/configure.ac
--- V_0_6_0/configure.ac	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/configure.ac	2016-06-05 18:08:42.795565598 +0200
@@ -25,6 +25,8 @@
 
 all_drivers="upekts upektc upeksonly vcom5s uru4000 fdu2000 aes1610 aes1660 aes2501 aes2550 aes2660 aes3500 aes4000 vfs101 vfs301 vfs5011 upektc_img etes603"
 
+all_drivers="$all_drivers  vfs451 vfs471 vfs491 vfs495"
+
 require_imaging='no'
 require_aeslib='no'
 require_aesX660='no'
@@ -46,6 +48,10 @@
 enable_vfs101='no'
 enable_vfs301='no'
 enable_vfs5011='no'
+enable_vfs451='no'
+enable_vfs471='no'
+enable_vfs491='no'
+enable_vfs495='no'
 enable_upektc_img='no'
 enable_etes603='no'
 
@@ -142,6 +148,22 @@
 			AC_DEFINE([ENABLE_VFS5011], [], [Build Validity VFS5011 driver])
 			enable_vfs5011="yes"
 		;;
+		vfs451)
+			AC_DEFINE([ENABLE_VFS451], [], [Build Validity VFS451 driver])
+			enable_vfs451="yes"
+		;;
+		vfs471)
+			AC_DEFINE([ENABLE_VFS471], [], [Build Validity VFS471 driver])
+			enable_vfs471="yes"
+		;;
+		vfs491)
+			AC_DEFINE([ENABLE_VFS491], [], [Build Validity VFS491 driver])
+			enable_vfs491="yes"
+		;;
+		vfs495)
+			AC_DEFINE([ENABLE_VFS495], [], [Build Validity VFS495 driver])
+			enable_vfs495="yes"
+		;;
 		upektc_img)
 			AC_DEFINE([ENABLE_UPEKTC_IMG], [], [Build Upek TouchChip Fingerprint Coprocessor driver])
 			enable_upektc_img="yes"
@@ -173,6 +195,11 @@
 AM_CONDITIONAL([ENABLE_VFS101], [test "$enable_vfs101" = "yes"])
 AM_CONDITIONAL([ENABLE_VFS301], [test "$enable_vfs301" = "yes"])
 AM_CONDITIONAL([ENABLE_VFS5011], [test "$enable_vfs5011" = "yes"])
+AM_CONDITIONAL([ENABLE_VFS451], [test "$enable_vfs451" = "yes"])
+AM_CONDITIONAL([ENABLE_VFS471], [test "$enable_vfs471" = "yes"])
+AM_CONDITIONAL([ENABLE_VFS491], [test "$enable_vfs491" = "yes"])
+AM_CONDITIONAL([ENABLE_VFS495], [test "$enable_vfs495" = "yes"])
+AM_CONDITIONAL([VCS_DRIVER_ENABLE], [test "$enable_vfs451" = "yes" || test "$enable_vfs471" = "yes" || test "$enable_vfs491" = "yes" || test "$enable_vfs495" = "yes"])
 AM_CONDITIONAL([ENABLE_UPEKTC_IMG], [test "$enable_upektc_img" = "yes"])
 AM_CONDITIONAL([ENABLE_ETES603], [test "$enable_etes603" = "yes"])
 
@@ -386,6 +413,26 @@
 else
 	AC_MSG_NOTICE([   vfs5011 driver disabled])
 fi
+if test x$enable_vfs451 != xno ; then
+	AC_MSG_NOTICE([** vfs451 driver enabled])
+else
+	AC_MSG_NOTICE([   vfs451 driver disabled])
+fi
+if test x$enable_vfs471 != xno ; then
+	AC_MSG_NOTICE([** vfs471 driver enabled])
+else
+	AC_MSG_NOTICE([   vfs471 driver disabled])
+fi
+if test x$enable_vfs491 != xno ; then
+	AC_MSG_NOTICE([** vfs491 driver enabled])
+else
+	AC_MSG_NOTICE([   vfs491 driver disabled])
+fi
+if test x$enable_vfs495 != xno ; then
+	AC_MSG_NOTICE([** vfs495 driver enabled])
+else
+	AC_MSG_NOTICE([   vfs495 driver disabled])
+fi
 if test x$enable_upektc_img != xno ; then
 	AC_MSG_NOTICE([** upektc_img driver enabled])
 else
diff -Nru V_0_6_0/libfprint/core.c V_0_6_0-patched/libfprint/core.c
--- V_0_6_0/libfprint/core.c	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/libfprint/core.c	2016-05-30 02:04:18.794950773 +0200
@@ -389,6 +389,9 @@
 #ifdef ENABLE_VFS5011
 	&vfs5011_driver,
 #endif
+#if defined(ENABLE_VFS451) || defined(ENABLE_VFS471) || defined(ENABLE_VFS491) || defined(ENABLE_VFS495)
+	&validity_driver,
+#endif
 #ifdef ENABLE_UPEKTC
 	&upektc_driver,
 #endif
diff -Nru V_0_6_0/libfprint/drivers/driver_ids.h V_0_6_0-patched/libfprint/drivers/driver_ids.h
--- V_0_6_0/libfprint/drivers/driver_ids.h	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/libfprint/drivers/driver_ids.h	2016-05-30 02:15:43.206920259 +0200
@@ -39,6 +39,7 @@
 	AES3500_ID	= 16,
 	UPEKTC_IMG_ID	= 17,
 	ETES603_ID	= 18,
+	VALIDITY_ID	= 21,
 	VFS5011_ID	= 19,
 };
 
diff -Nru V_0_6_0/libfprint/drivers/validity/vfsDriver.c V_0_6_0-patched/libfprint/drivers/validity/vfsDriver.c
--- V_0_6_0/libfprint/drivers/validity/vfsDriver.c	1970-01-01 01:00:00.000000000 +0100
+++ V_0_6_0-patched/libfprint/drivers/validity/vfsDriver.c	2016-06-05 17:52:24.550609212 +0200
@@ -0,0 +1,294 @@
+
+
+/*! @file vfsDriver.c
+*******************************************************************************
+* libfprint Interface Functions
+*
+* This file contains the libfprint interface functions for validity fingerprint sensor device.
+*
+* Copyright 2006 Validity Sensors, Inc. 
+
+* This library is free software; you can redistribute it and/or
+* modify it under the terms of the GNU Lesser General Public
+* License as published by the Free Software Foundation; either
+* version 2.1 of the License, or (at your option) any later version.
+*
+* This library is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this library; if not, write to the Free Software
+* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+*/
+
+#include <errno.h>
+#include <string.h>
+#include <glib.h>
+#include <usb.h>
+#include <fp_internal.h>
+#include <stdio.h>
+#include <dlfcn.h>
+#include "vfsDriver.h"
+#include "vfsWrapper.h"
+#include <syslog.h>
+
+/* Number of enroll stages */
+#define VFS_NR_ENROLL		1
+
+#define VAL_MIN_ACCEPTABLE_MINUTIAE (2*MIN_ACCEPTABLE_MINUTIAE)
+#define VAL_DEFAULT_THRESHOLD 60
+
+static const struct usb_id id_table[] = {
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_301,  },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_451,  },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_5111, },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_5011, },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_471,  },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_5131, },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_491,  },
+    { .vendor = VALIDITY_VENDOR_ID, .product = VALIDITY_PRODUCT_ID_495,  },
+    { 0, 0, 0, }, /* terminating entry */
+};
+
+#define VFS_ASSERT(_state, _message, _err) ({ \
+	if (__builtin_expect(!(_state), 0)) \
+	{ \
+		fp_err((_message)); \
+		fpi_imgdev_session_error(dev, (_err)); \
+		if (img) \
+		{ \
+			fp_img_free(img); \
+		} \
+		result = (_err); \
+		goto cleanup; \
+	} \
+})
+
+static int vfs_extract_image(struct fp_img_dev *dev,
+                             void *const handle,
+                             struct fp_img *img,
+                             const size_t data_len)
+{
+	validity_dev *vdev = dev->priv;
+	unsigned char *data;
+
+	vfs_get_img_width_t		vfs_get_img_width;
+	vfs_get_img_height_t	vfs_get_img_height;
+	vfs_get_img_data_t		vfs_get_img_data;
+	vfs_free_img_data_t		vfs_free_img_data;
+
+	vfs_get_img_width = dlsym(handle, "vfs_get_img_width");
+	if (__builtin_expect(!vfs_get_img_width, 0))
+	{
+		fp_err(dlerror());
+		return -ENODEV;
+	}
+
+	img->width =(* vfs_get_img_width)(vdev);
+
+	vfs_get_img_height = dlsym(handle, "vfs_get_img_height");
+	if (__builtin_expect(!vfs_get_img_height, 0))
+	{
+		fp_err(dlerror());
+		return -ENODEV;
+	}
+
+	img->height =(*vfs_get_img_height)(vdev);
+
+	fp_dbg("%d x %d image returned\n", img->width, img->height );
+
+	vfs_get_img_data = dlsym(handle, "vfs_get_img_data");
+	if (__builtin_expect(!vfs_get_img_data, 0))
+	{
+		fp_err(dlerror());
+		return -ENODEV;
+	}
+
+	data =(*vfs_get_img_data)(vdev);
+
+	if (data != NULL)
+	{
+		g_memmove(img->data, data, data_len);
+
+		img->flags = FP_IMG_COLORS_INVERTED | FP_IMG_V_FLIPPED;
+
+		vfs_free_img_data = dlsym(handle, "vfs_free_img_data");
+		if (__builtin_expect(!vfs_free_img_data, 0))
+		{
+			fp_err(dlerror());
+			return -ENODEV;
+		}
+
+		(*vfs_free_img_data)(data);
+	}
+	else
+	{
+		fp_err("Failed to get finger print image data");
+		return -ENODATA;
+	}
+
+	return 0;
+}
+
+/* Activate device */
+static int dev_activate(struct fp_img_dev *dev, enum fp_imgdev_state state)
+{
+	validity_dev *vdev = dev->priv;
+	void *handle;
+	size_t data_len;
+	struct fp_img *img = NULL;
+	int result = 0;
+
+	vfs_wait_for_service_t	vfs_wait_for_service;
+	vfs_set_matcher_type_t	vfs_set_matcher_type;
+	vfs_dev_init_t			vfs_dev_init;
+	vfs_capture_t			vfs_capture;
+	vfs_get_img_datasize_t	vfs_get_img_datasize;
+	vfs_clean_handles_t		vfs_clean_handles;
+	vfs_dev_exit_t			vfs_dev_exit;
+
+	/* Notify activate complete */
+	fpi_imgdev_activate_complete(dev, 0);
+
+	handle = dlopen("libvfsFprintWrapper.so",
+					RTLD_LAZY | RTLD_GLOBAL | RTLD_NODELETE);
+	VFS_ASSERT(handle, dlerror(), -ENODEV);
+
+	/* wait for validity device to come up and be ready to take a finger swipe
+	 * Wait will happen for a stipulated time(10s - 40s), then errors
+	 */
+	vfs_wait_for_service = dlsym(handle, "vfs_wait_for_service");
+	VFS_ASSERT(vfs_wait_for_service, dlerror(), -ENODEV);
+
+	result = (*vfs_wait_for_service)();
+	VFS_ASSERT(result == VFS_RESULT_WRAPPER_OK,
+			"VFS module failed to wait for service", -EPERM);
+
+	/* Set the matcher type */
+	vfs_set_matcher_type = dlsym(handle, "vfs_set_matcher_type");
+	VFS_ASSERT(vfs_set_matcher_type, dlerror(), -ENODEV);
+
+	(*vfs_set_matcher_type)(VFS_FPRINT_MATCHER);
+
+	vfs_dev_init = dlsym(handle, "vfs_dev_init");
+	VFS_ASSERT(vfs_dev_init, dlerror(), -ENODEV);
+
+	result = (*vfs_dev_init)(vdev);
+	VFS_ASSERT(result == VFS_RESULT_WRAPPER_OK,
+			"VFS module failed to initialize", -EPERM);
+
+	vfs_capture = dlsym(handle, "vfs_capture");
+	VFS_ASSERT(vfs_capture, dlerror(), -ENODEV);
+
+	result = (*vfs_capture)(vdev, 1);
+	VFS_ASSERT(result == VCS_FP_CAPTURE_COMPLETE,
+			"Could not capture fingerprint", -EIO);
+
+	vfs_get_img_datasize = dlsym(handle, "vfs_get_img_datasize");
+	VFS_ASSERT(vfs_get_img_datasize, dlerror(), -ENODEV);
+
+	data_len = (*vfs_get_img_datasize)(vdev);
+	VFS_ASSERT(data_len, "Zero image size", -ENOMEM);
+
+	img = fpi_img_new(data_len);
+	VFS_ASSERT(img, "Could not get new fpi img", -ENOMEM);
+
+	/* Fingerprint is present, load image from reader */
+	fpi_imgdev_report_finger_status(dev, TRUE);
+
+	result = vfs_extract_image(dev, handle, img, data_len);
+	VFS_ASSERT(!result, "", result);
+
+	fpi_imgdev_image_captured(dev, img);
+
+	/* NOTE: finger off is expected only after submitting image... */
+	fpi_imgdev_report_finger_status(dev, FALSE);
+
+	result = 0;
+
+cleanup:
+	if (result != -ENODEV)
+	{
+		vfs_clean_handles = dlsym(handle, "vfs_clean_handles");
+		if (vfs_clean_handles)
+		{
+			(*vfs_clean_handles)(vdev);
+		}
+
+		vfs_dev_exit = dlsym(handle, "vfs_dev_exit");
+		if (vfs_dev_exit)
+		{
+			(*vfs_dev_exit)(vdev);
+		}
+	}
+
+	dlclose(handle);
+
+	return result;
+}
+
+/* Deactivate device */
+static void dev_deactivate(struct fp_img_dev *dev)
+{
+	fpi_imgdev_deactivate_complete(dev);
+}
+
+static int dev_open(struct fp_img_dev *dev, unsigned long driver_data)
+{
+    validity_dev *vdev = NULL;
+    int result;
+
+    /* Set enroll stage number */
+	dev->dev->nr_enroll_stages = VFS_NR_ENROLL;
+
+    /* Initialize private structure */
+	vdev = g_malloc0(sizeof(validity_dev));
+	dev->priv = vdev;
+
+	/* Notify open complete */
+	fpi_imgdev_open_complete(dev, 0);
+
+    return 0;
+}
+
+/*!
+*******************************************************************************
+** Closes the opened sensor. Destroys Validity's client context object. Frees
+** allocated resources
+**
+** @param[in]    dev
+**       Pointer to the device structure
+**
+** @return
+*/
+static void dev_close(struct fp_img_dev *dev)
+{
+    /* Release private structure */
+	g_free(dev->priv);
+
+	/* Notify close complete */
+	fpi_imgdev_close_complete(dev);
+}
+
+struct fp_img_driver  validity_driver = {
+    .driver = {
+        .id = VALIDITY_DRIVER_ID,
+        .name = VALIDITY_FP_COMPONENT,
+        .full_name = VALIDITY_DRIVER_FULLNAME,
+        .id_table = id_table,
+		.scan_type = FP_SCAN_TYPE_SWIPE,
+    },
+
+	/* Image specification */
+	.flags = 0,
+	.img_width = -1,
+	.img_height = -1,
+
+    .open = dev_open,
+    .close = dev_close,
+	.activate = dev_activate,
+	.deactivate = dev_deactivate
+};
+
diff -Nru V_0_6_0/libfprint/drivers/validity/vfsDriver.h V_0_6_0-patched/libfprint/drivers/validity/vfsDriver.h
--- V_0_6_0/libfprint/drivers/validity/vfsDriver.h	1970-01-01 01:00:00.000000000 +0100
+++ V_0_6_0-patched/libfprint/drivers/validity/vfsDriver.h	2016-06-05 17:51:38.776611253 +0200
@@ -0,0 +1,70 @@
+/*! @file vfsDriver.h
+*******************************************************************************
+* libfprint Interface Functions
+*
+* This file contains the libfprint interface functions and definitions
+*
+* Copyright 2006 Validity Sensors, Inc. 
+
+* This library is free software; you can redistribute it and/or
+* modify it under the terms of the GNU Lesser General Public
+* License as published by the Free Software Foundation; either
+* version 2.1 of the License, or (at your option) any later version.
+*
+* This library is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this library; if not, write to the Free Software
+* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+*/
+
+#ifndef __vfsDriver_h__
+#define __vfsDriver_h__
+
+#define VCS_MAX_FINGER              10
+#define VALIDITY_DRIVER_ID          10
+#define VALIDITY_VENDOR_ID          0x138A
+#define VALIDITY_PRODUCT_ID_301     0x0005  
+#define VALIDITY_PRODUCT_ID_451     0x0007
+#define VALIDITY_PRODUCT_ID_5111    0x0010
+#define VALIDITY_PRODUCT_ID_5011    0x0011
+#define VALIDITY_PRODUCT_ID_471	    0x003c
+#define VALIDITY_PRODUCT_ID_5131    0x0018
+#define VALIDITY_PRODUCT_ID_491	    0x003d
+#define VALIDITY_PRODUCT_ID_495	    0x003f
+#define VALIDITY_DRIVER_FULLNAME    "Validity Sensors"
+#define VALIDITY_FP_COMPONENT       "Validity"
+#define MAX_ENROLLMENT_PRINTS	    3
+#define MAX_TEMPLATES		        10
+#define VFS_NT_MATCHER	    	    1
+#define VFS_COGENT_MATCHER	    2
+#define VFS_FPRINT_MATCHER     3
+
+#define VFS_RESULT_WRAPPER_OK 0
+/*
+enum vfs_fp_capture_result
+{
+    VFS_FP_CAPTURE_ERROR = -1,
+    VFS_FP_CAPTURE_COMPLETE = 1,
+    VFS_FP_CAPTURE_FAIL
+};
+*/
+
+enum vcs_fp_capture_result
+{
+    VCS_FP_CAPTURE_ERROR = -1,
+    VCS_FP_CAPTURE_COMPLETE = 1,
+    VCS_FP_CAPTURE_FAIL
+};
+
+typedef struct validity_dev_s 
+{
+    void *pValidityCtx;
+    void *hImage;
+    void *pEnrollData;
+}validity_dev;
+
+#endif //__vfsDriver_h__
diff -Nru V_0_6_0/libfprint/drivers/validity/vfsWrapper.h V_0_6_0-patched/libfprint/drivers/validity/vfsWrapper.h
--- V_0_6_0/libfprint/drivers/validity/vfsWrapper.h	1970-01-01 01:00:00.000000000 +0100
+++ V_0_6_0-patched/libfprint/drivers/validity/vfsWrapper.h	2016-06-05 17:09:21.915724357 +0200
@@ -0,0 +1,39 @@
+/*******************************************************************************
+* Helper functions for Validity driver interface functions
+*
+* This file contains the Helper functions for Validity driver interface functions
+* and their definitions
+*
+* Copyright 2006 Validity Sensors, Inc. 
+*
+* This library is free software; you can redistribute it and/or
+* modify it under the terms of the GNU Lesser General Public
+* License as published by the Free Software Foundation; either
+* version 2.1 of the License, or (at your option) any later version.
+*
+* This library is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+* Lesser General Public License for more details.
+*
+* You should have received a copy of the GNU Lesser General Public
+* License along with this library; if not, write to the Free Software
+* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+*/
+
+#ifndef __vfsWrapper_h__
+#define __vfsWrapper_h__
+
+typedef int (*vfs_dev_init_t)(void *);
+typedef int (*vfs_wait_for_service_t)(void);
+typedef int (*vfs_set_matcher_type_t)(int);
+typedef int (*vfs_capture_t)(void *, int);
+typedef int (*vfs_get_img_datasize_t) (void *);
+typedef int (*vfs_get_img_width_t) (void *);
+typedef int (*vfs_get_img_height_t) (void *);
+typedef unsigned char* (*vfs_get_img_data_t)(void *);
+typedef void (*vfs_free_img_data_t)(unsigned char *);
+typedef void (*vfs_clean_handles_t)(void *);
+typedef void (*vfs_dev_exit_t)(void *);
+
+#endif /*vfsWrapper */
diff -Nru V_0_6_0/libfprint/fp_internal.h V_0_6_0-patched/libfprint/fp_internal.h
--- V_0_6_0/libfprint/fp_internal.h	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/libfprint/fp_internal.h	2016-05-30 02:11:14.120932256 +0200
@@ -232,6 +232,7 @@
 
 /* flags for fp_img_driver.flags */
 #define FP_IMGDRV_SUPPORTS_UNCONDITIONAL_CAPTURE (1 << 0)
+#define MIN_ACCEPTABLE_MINUTIAE 10
 
 struct fp_img_driver {
 	struct fp_driver driver;
@@ -299,6 +300,9 @@
 #ifdef ENABLE_VFS5011
 extern struct fp_img_driver vfs5011_driver;
 #endif
+#if defined(ENABLE_VFS451) || defined(ENABLE_VFS471) || defined(ENABLE_VFS491) || defined(ENABLE_VFS495)
+extern struct fp_img_driver validity_driver;
+#endif
 #ifdef ENABLE_UPEKTC_IMG
 extern struct fp_img_driver upektc_img_driver;
 #endif
diff -Nru V_0_6_0/libfprint/imgdev.c V_0_6_0-patched/libfprint/imgdev.c
--- V_0_6_0/libfprint/imgdev.c	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/libfprint/imgdev.c	2016-05-30 02:09:42.779936328 +0200
@@ -23,7 +23,6 @@
 
 #include "fp_internal.h"
 
-#define MIN_ACCEPTABLE_MINUTIAE 10
 #define BOZORTH3_DEFAULT_THRESHOLD 40
 #define IMG_ENROLL_STAGES 5
 
diff -Nru V_0_6_0/libfprint/Makefile.am V_0_6_0-patched/libfprint/Makefile.am
--- V_0_6_0/libfprint/Makefile.am	2015-02-03 17:36:32.000000000 +0100
+++ V_0_6_0-patched/libfprint/Makefile.am	2016-06-05 18:04:17.358577432 +0200
@@ -19,6 +19,7 @@
 VFS101_SRC = drivers/vfs101.c
 VFS301_SRC = drivers/vfs301.c drivers/vfs301_proto.c  drivers/vfs301_proto.h drivers/vfs301_proto_fragments.h
 VFS5011_SRC = drivers/vfs5011.c drivers/vfs5011_proto.h
+VCS_SRCS    = drivers/validity/vfsDriver.c drivers/validity/vfsDriver.h drivers/validity/vfsWrapper.h
 UPEKTC_IMG_SRC = drivers/upektc_img.c drivers/upektc_img.h
 ETES603_SRC = drivers/etes603.c
 
@@ -40,6 +41,7 @@
 	$(VFS101_SRC)		\
 	$(VFS301_SRC)		\
 	$(VFS5011_SRC)		\
+	$(VCS_SRCS)		\
 	$(UPEKTC_IMG_SRC)	\
 	$(ETES603_SRC)		\
 	drivers/aesx660.c	\
@@ -91,12 +93,12 @@
 	nbis/mindtct/sort.c \
 	nbis/mindtct/util.c
 
-libfprint_la_CFLAGS = -fvisibility=hidden -I$(srcdir)/nbis/include $(LIBUSB_CFLAGS) $(GLIB_CFLAGS) $(CRYPTO_CFLAGS) $(AM_CFLAGS)
+libfprint_la_CFLAGS = -fvisibility=hidden -I$(srcdir)/nbis/include -I$(srcdir)/drivers/validity $(LIBUSB_CFLAGS) $(GLIB_CFLAGS) $(CRYPTO_CFLAGS) $(AM_CFLAGS)
 libfprint_la_LDFLAGS = -version-info @lt_major@:@lt_revision@:@lt_age@
 libfprint_la_LIBADD = -lm $(LIBUSB_LIBS) $(GLIB_LIBS) $(CRYPTO_LIBS)
 
 fprint_list_udev_rules_SOURCES = fprint-list-udev-rules.c
-fprint_list_udev_rules_CFLAGS = -fvisibility=hidden -I$(srcdir)/nbis/include $(LIBUSB_CFLAGS) $(GLIB_CFLAGS) $(CRYPTO_CFLAGS) $(AM_CFLAGS)
+fprint_list_udev_rules_CFLAGS = -fvisibility=hidden -I$(srcdir)/nbis/include -I$(srcdir)/drivers/validity $(LIBUSB_CFLAGS) $(GLIB_CFLAGS) $(CRYPTO_CFLAGS) $(AM_CFLAGS)
 fprint_list_udev_rules_LDADD = $(builddir)/libfprint.la $(GLIB_LIBS)
 
 udev_rules_DATA = 60-fprint-autosuspend.rules
@@ -174,6 +176,10 @@
 DRIVER_SRC += $(VFS5011_SRC)
 endif
 
+if VCS_DRIVER_ENABLE
+DRIVER_SRC += $(VCS_SRCS)
+endif
+
 if ENABLE_UPEKTC_IMG
 DRIVER_SRC += $(UPEKTC_IMG_SRC)
 endif
